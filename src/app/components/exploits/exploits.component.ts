import { Component, Input } from '@angular/core';
import { CveService } from '../../services/cve.service';
import * as MEditor from 'monaco-editor';

export class Exploit {
    id: number;
    name: string;
    description: string;
    exampleFile: string;
    author: string;
    datePublished: Date;
    isRepo: boolean;
    source: string;
    dateCreated: string;
    sourceUrl: string;
    ignore: boolean;
    fixed: boolean;
    fileContent: string;
    editorOptions: any = {
        theme: 'vs-dark',
        automaticLayout: true,
        scrollBeyondLastLine: false,
        language: 'Ruby',
    };
}

const fileExtensionLanguages = {
    js: 'javascript',
    ts: 'typescript',
    html: 'html',
    css: 'css',
    scss: 'sass',
    sass: 'sass',
    less: 'less',
    py: 'python',
    java: 'java',
    cpp: 'c++',
    c: 'c',
    cs: 'c#',
    php: 'php',
    rb: 'ruby',
    go: 'go',
    rs: 'rust',
    kt: 'kotlin',
    swift: 'swift',
    m: 'objective-c',
    sql: 'sql',
    pl: 'perl',
    sh: 'shell',
    bash: 'bash',
    ps1: 'powershell',
    xml: 'xml',
    json: 'json',
    yaml: 'yaml',
    yml: 'yaml',
    md: 'markdown',
    r: 'r',
    lua: 'lua',
    groovy: 'groovy',
    dart: 'dart',
    ml: 'ocaml',
    hs: 'haskell',
    elm: 'elm',
    erl: 'erlang',
    ex: 'elixir',
    clj: 'clojure',
    cljs: 'clojurescript',
    asm: 'assembly',
    vhdl: 'vhdl',
    verilog: 'verilog',
    tex: 'latex',
    sty: 'latex',
    jsp: 'java server pages',
    jspx: 'java server pages xml',
    scala: 'scala',
    f: 'fortran',
    f90: 'fortran',
    f95: 'fortran',
};

@Component({
    selector: 'app-exploits',
    templateUrl: './exploits.component.html',
    styleUrl: './exploits.component.scss',
})
export class ExploitsComponent {
    @Input() cveId: string = '';
    editorOptions = {
        theme: 'vs-dark',
        language: 'text',
        automaticLayout: true,
        scrollBeyondLastLine: false,
    };
    monacoEditor: MEditor.editor.ICodeEditor = null;
    groupedExploits: Map<string, Exploit[]> = new Map();

    public exploits: Exploit[] = [];
    constructor(private cveService: CveService) {}
    ngOnInit(): void {
        this.getExploits();
    }

    getExploits() {
        this.cveService.getExploits(this.cveId).subscribe((response) => {
            this.exploits = Array.from(response);
            this.setExploitEditorOptions(this.exploits);
            this.groupedExploits = this.groupByExploitSource(this.exploits);
        });
    }

    setExploitEditorOptions(items: Exploit[]) {
        items.forEach((item) => {
            if (item.fileContent) {
                var extension = item.exampleFile.slice(
                    item.exampleFile.lastIndexOf('.') + 1
                );
                var language = fileExtensionLanguages[extension]
                    ? fileExtensionLanguages[extension]
                    : 'text';
                item.editorOptions = { ...this.editorOptions, language };
            } else {
                item.editorOptions = this.editorOptions;
            }
        });
    }

    private groupByExploitSource(items: Exploit[]): Map<string, Exploit[]> {
        const map = new Map<string, Exploit[]>();
        items.forEach((item) => {
            const existing = map.get(item.source) || [];
            existing.push(item);
            map.set(item.source, existing);
        });
        return map;
    }
}
