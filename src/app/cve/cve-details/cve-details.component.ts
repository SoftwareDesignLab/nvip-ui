import { Component, Input, OnInit } from '@angular/core';
import { CveUtilService, tabInfo } from '../cve-util-service';
import { CveService } from '../../services/cve.service';
import { SsvcService } from '../../services/ssvc.service';
import {
    Description,
    Exploit,
    Fix,
    Patch,
    Ssvc,
    TreeNode,
} from '../models/models';

export const colors = {
    red: 'rgb(220, 53, 69)',
    green: 'rgb(40, 167, 69)',
    yellow: 'rgb(255, 193, 7)',
    orange: 'rgb(238, 135, 51)',
    navy: '#21618C',
    darkred: 'rgb(112, 1, 1)',
    blue: 'rgb(0, 68, 194)',
    purple: 'rgb(53, 0, 79)',
    black: 'rgb(0, 0, 0)',
    grey: '#c6c6cc',
    white: '#ffffff',
};

@Component({
    selector: 'app-cve-details',
    templateUrl: './templates/cve.details.html',
})
export class CveDetailsComponent implements OnInit {
    @Input() cveId: string = '';
    details: any = null;
    score: number = 1;
    vdoLabels: any[] = [];
    constructor(private cveService: CveService) {}
    ngOnInit(): void {
        this.getCveDetails();
        this.getVdoLabels();
    }

    getCveDetails() {
        this.cveService.getDetails(this.cveId).subscribe((response) => {
            this.details = response;
        });
    }

    extractSourceName(url: string): string {
        try {
            const parsedUrl = new URL(url);
            return parsedUrl.hostname;
        } catch (e) {
            return 'Source (N/A)';
        }
    }

    impactMethod: any[] = [];
    logicalImpact: any[] = [];

    getVdoLabels() {
        this.cveService.getVdoLabels(this.cveId).subscribe((response) => {
            if (response.vdoLabels) {
                this.vdoLabels = Array.from(response.vdoLabels);
                this.logicalImpact = this.vdoLabels
                    .filter((item) => item.vdoNounGroup === 'Logical Impact')
                    .map((item) => item.vdoLabel);

                this.impactMethod = this.vdoLabels
                    .filter((item) => item.vdoNounGroup === 'Impact Method')
                    .map((item) => item.vdoLabel);
            }
            this.score = response.cvss;
        });
    }

    getSeverityScore(score: number): string {
        if(this.score!=null){
            var sevirity= this.score>=0 && this.score < 3
            ? 'Low'
            : this.score < 6
            ? 'Medium'
            : this.score < 9
            ? 'High'
            : 'Critical';
        return sevirity;

        }else{
            return 'N/A'
        }

    }

    getSeverityColor(): string {
        if (this.score!=null) {
            const severity = this.getSeverityScore(this.score);
            return severity == 'Low'
                ? 'text-success'
                : severity == 'Medium'
                ? 'text-warning'
                : severity == 'High'
                ? 'text-danger'
                : 'text-dark';
        } else {
            return 'text-dark';
        }
    }
}

@Component({
    selector: 'app-cpe',
    templateUrl: './templates/cpe.html',
    styleUrl: './cve-details.component.scss',
})
export class CpeComponent implements OnInit {
    @Input() cveId: string = '';
    @Input() tab: tabInfo = null;

    vdoLabels: any[] = [];

    isLoading: boolean = false;
    score: number = 5;

    cpe: any[] = [];
    constructor(private cveService: CveService) {}

    ngOnInit(): void {
        this.getCpe();
    }

    getCpe() {
        this.isLoading = true;
        this.cveService.getCpe(this.cveId).subscribe((response) => {
            this.cpe = response;
            this.isLoading = false;
        });
    }
}

@Component({
    selector: 'app-cve-description',
    templateUrl: './templates/description.html',
    styleUrl: './cve-details.component.scss',
})
export class CveDescriptionComponent implements OnInit {
    @Input() cveId: string = '';
    @Input() tab: tabInfo = null;

    isLoading:boolean=false;

    Item: Description = new Description();
    constructor(private cveService: CveService) {}

    ngOnInit(): void {
        this.getDescription();
    }

    getDescription() {
        this.isLoading=true;
        this.cveService.getDescription(this.cveId).subscribe((response) => {
            this.Item = response;
            this.isLoading=false;
        });
    }
}

@Component({
    selector: 'app-cve-affected-products',
    templateUrl: './templates/affected-products.html',
    styleUrl: './cve-details.component.scss',
})
export class CveAffectedProductsComponent {
    @Input() cveId: string = '';
    @Input() tab: tabInfo = null;

    affectedProducts: any[] = [];
    isLoading: boolean = false;

    constructor(private cveService: CveService) {}

    ngOnInit(): void {
        this.getAfefectedProducts();
    }

    getAfefectedProducts() {
        this.isLoading = true;
        this.cveService
            .getAffectedProducts(this.cveId)
            .subscribe((response) => {
                this.affectedProducts = Array.from(response);
                this.isLoading = false;
            });
    }
}

@Component({
    selector: 'app-cve-vdo-labels',
    templateUrl: './templates/vdo-labels.html',
    styleUrl: './cve-details.component.scss',
})
export class CveVdoLabelsComponent implements OnInit {
    @Input() cveId: string = '';
    @Input() tab: tabInfo = null;

    vdoLabels: any[] = [];

    isLoading: boolean = false;
    score: number = 5;

    constructor(private cveService: CveService) {}

    ngOnInit(): void {
        this.getVdoLabels();
    }

    getVdoLabels() {
        this.isLoading = true;
        this.cveService.getVdoLabels(this.cveId).subscribe((response) => {
            this.vdoLabels = Array.from(response.vdoLabels);
            this.score = response.cvss;
            this.isLoading = false;
        });
    }

    getScoreColor(number: number): string {
        return number <= 25
            ? 'bg-success'
            : number <= 50
            ? 'bg-warning'
            : number <= 75
            ? 'bg-danger'
            : 'bg-secondary';
    }

    getSeverityScore(score: number): string {
        if(score!=null){
            return score < 3
            ? 'Low'
            : score < 6
            ? 'Medium'
            : score < 9
            ? 'High'
            : 'Critical';
        }else{
            return 'N/A';
        }

    }

    getSeverityColor(score: number): string {
        if (this.score!=null) {
            const severity = this.getSeverityScore(score);
            return severity == 'Low'
                ? 'bg-success text-white'
                : severity == 'Medium'
                ? 'bg-warning text-white'
                : severity == 'High'
                ? 'bg-danger text-white'
                : 'bg-dark text-white';
        } else {
            return 'bg-danger text-white';
        }
    }
}

@Component({
    selector: 'app-cve-ssvc',
    templateUrl: './templates/ssvc.html',
    styleUrl: './cve-details.component.scss',
})
export class CveSsvcScoresComponent implements OnInit {
    @Input() cveId: string = '';
    @Input() tab: tabInfo = null;
    treeData: TreeNode = null;
    isLoading: boolean = false;
    isTreeInitialized: boolean = false;
    public Ssvc: Ssvc = new Ssvc();

    constructor(private ssvcService: SsvcService) {}

    ngOnInit(): void {
        this.getSsvcScore();
    }

    getSsvcScore() {
        this.isLoading = true;
        this.ssvcService.getSsvcScore(this.cveId).subscribe((response) => {
            this.Ssvc = Object.assign(new Ssvc(), response);
            this.isLoading = false;
            this.initializeTree();
        });
    }

    initializeTree() {
        this.treeData = new TreeNode(
            'Exploitation : ',
            this.Ssvc.exploitStatus,
            'secondary',
            this.exploitationColor(this.Ssvc.exploitStatus),
            [
                new TreeNode(
                    'Automatable :',
                    this.Ssvc.automatable ? 'Yes' : 'No',
                    'secondary',
                    this.automatableColors(this.Ssvc.automatable),
                    [
                        new TreeNode(
                            'Technical Impact : ',
                            this.Ssvc.technicalImpact,
                            'secondary',
                            this.technicalImpactColor(
                                this.Ssvc.technicalImpact
                            ),
                            [
                                new TreeNode(
                                    'Mission & Well-Being',
                                    '',
                                    'secondary',
                                    colors.grey,
                                    [
                                        new TreeNode(
                                            'Low : ',
                                            this.Ssvc.ssvcScoreLow,
                                            this.scoreColor(
                                                this.Ssvc.ssvcScoreLow
                                            ),
                                            this.scoreColor(
                                                this.Ssvc.ssvcScoreLow
                                            ),
                                            null,
                                            150
                                        ),
                                        new TreeNode(
                                            'Medium : ',
                                            this.Ssvc.ssvcScoreMedium,
                                            this.scoreColor(
                                                this.Ssvc.ssvcScoreMedium
                                            ),
                                            this.scoreColor(
                                                this.Ssvc.ssvcScoreMedium
                                            ),
                                            null,
                                            150
                                        ),
                                        new TreeNode(
                                            'High : ',
                                            this.Ssvc.ssvcScoreHigh,
                                            this.scoreColor(
                                                this.Ssvc.ssvcScoreHigh
                                            ),
                                            this.scoreColor(
                                                this.Ssvc.ssvcScoreHigh
                                            ),
                                            null,
                                            150
                                        ),
                                    ],
                                    160
                                ),
                            ],
                            200
                        ),
                    ],
                    150
                ),
            ],
            200,
            true
        );
        this.isTreeInitialized = true;
    }

    scoreColor(score: string): string {
        score = score.toLowerCase();
        return score === 'act'
            ? colors.red
            : score === 'attend'
            ? colors.orange
            : score === 'track*'
            ? colors.yellow
            : colors.green;
    }

    exploitationColor(exploit: string) {
        return exploit === 'NONE'
            ? colors.green
            : exploit === 'POC'
            ? colors.yellow
            : exploit === 'Active'
            ? colors.red
            : colors.black;
    }
    automatableColors(automatable: boolean) {
        return automatable == true ? colors.green : colors.red;
    }
    technicalImpactColor(technical: string) {
        return technical == 'total' ? colors.red : colors.green;
    }
}
@Component({
    selector: 'app-cve-sources',
    templateUrl: './templates/sources.html',
    styleUrl: './cve-details.component.scss',
})
export class CveSourcesComponent {
    @Input() cveId: string = '';
    @Input() tab: tabInfo = null;

    sources: any[] = [];
    isLoading: boolean = false;

    constructor(private cveService: CveService) {}

    ngOnInit(): void {
        this.getRawDescriptions();
    }

    getRawDescriptions() {
        this.isLoading = true;
        this.cveService.getRawDescription(this.cveId).subscribe((response) => {
            this.sources = Array.from(response);
            this.isLoading = false;
        });
    }

    extractSourceName(url: string): string {
        try {
            const parsedUrl = new URL(url);
            return parsedUrl.hostname;
        } catch (e) {
            return 'Source (N/A)';
        }
    }
}

@Component({
    selector: 'app-cve-exploits',
    templateUrl: './templates/exploits.html',
    styleUrl: './cve-details.component.scss',
})
export class CveExploitsComponent implements OnInit {
    @Input() cveId: string = '';
    @Input() tab: tabInfo = null;
    isLoading: boolean = false;
    public exploits: Exploit[] = [];

    constructor(private cveService: CveService) {}

    ngOnInit(): void {
        this.getExploits();
    }

    getExploits() {
        this.isLoading = true;
        this.cveService.getExploits(this.cveId).subscribe((response) => {
            this.exploits = Array.from(response);
            this.isLoading = false;
        });
    }
}

@Component({
    selector: 'app-cve-patches',
    templateUrl: './templates/patches.html',
    styleUrl: './cve-details.component.scss',
})
export class CvePatchesComponent {
    @Input() cveId: string = '';
    @Input() tab: tabInfo = null;
    isLoading: boolean = false;
    public patches: Patch[] = [];

    constructor(
        private cveService: CveService,
        public utilService: CveUtilService
    ) {}

    ngOnInit(): void {
        this.getPatches();
    }

    getPatches() {
        this.isLoading = true;
        this.cveService.getPatches(this.cveId).subscribe((response) => {
            this.patches = Array.from(response);
            this.isLoading = false;
        });
    }
}

@Component({
    selector: 'app-cve-fixes',
    templateUrl: './templates/fixes.html',
    styleUrl: './cve-details.component.scss',
})
export class CveFixesComponent {
    @Input() cveId: string = '';
    @Input() tab: tabInfo = null;
    isLoading: boolean = false;
    public fixes: Fix[] = [];

    constructor(
        private cveService: CveService,
        public utilService: CveUtilService
    ) {}

    ngOnInit(): void {
        this.getFixes();
    }

    getFixes() {
        this.isLoading = true;
        this.cveService.getFixes(this.cveId).subscribe((response) => {
            this.fixes = Array.from(response);
            this.isLoading = false;
        });
    }
}
